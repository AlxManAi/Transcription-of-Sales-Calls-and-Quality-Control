1. Заходим в аккаунт Make.
2. Создаем новый сценарий и добавляем модуль для нужного сервиса Google (например, Gmail).
3. При настройке модуля выбираем Добавить новое соединение.
4. Вводим название соединения (например, "My Google Connection").
5. Вставляем "Client ID" и "Client Secret", полученные ранее.
6. Нажимаем Sign in with Google.
7. В открывшемся окне авторизации Google выбираем аккаунт и предоставляем необходимые разрешения.
8. После успешной авторизации соединение будет установлено, и можно использовать сервисы Google в сценариях Make.

Продолжаем создание сценария

4. После того как почта будет добавлена, настроим модуль:
    в графе Folder выбираем конкретную папку почты;
    в графе Filter type находятся два типа фильтров: Simple (простой) и Gmail filter — мы будем использовать именно его. Тем самым мы создаём свой фильтр;
    под графой Query есть надпись here: щёлкнув по этой ссылке, мы увидим подсказки, какие команды прописывать в Query для настроек фильтрации. Для наших задач будет достаточно использовать фильтр from, указав, от кого пришло письмо. Поэтому в графе Query пишем: from: после чего вставляем сюда адрес, с которого на почту поступают письма с записями телефонных переговоров;
    отмечаем, чтобы после обработки эти письма помечались на почте как прочитанные (в соответствующей графе выбираем Yes). Нажимаем ОК.

5. После того как настройки модуля завершены, появится новая плашка с вопросом, когда модулю начинать работу. Выставляем необходимую дату в календаре.

6. Чтобы проверить, как работает модуль, щёлкаем по нему правой кнопкой мыши и выбираем в списке Run this module only. Модуль выводит результат своей работы: информацию, которую он получил.

7. Щёлкаем по этому уведомлению, чтобы открылась плашка с подробностями о полученном письме.
Среди этой информации нас интересуют вкладки Attachments и Data: здесь указано, что в результате отработки модуля получено некое вложение, которое будет отправлено в работу.

8. Добавляем следующий модуль: для этого наводим курсор на правую часть первого модуля и щёлкаем по значку +. В качестве следующего модуля выбираем OpenAI ChatGPT и в этой вкладке выбираем опцию Create a Transcription (Whisper).

9. Настроим новый модуль: нажав на кнопку Add, вставляем в плашку свой API-ключ и заполняем остальные графы:

    в поле File Name в открывшемся списке находим Attachments File name;
    в поле Data мы указываем, какой файл будет использоваться: здесь мы в списке выбираем Attachments Data;
    в поле Model представлена только одна модель — Whisper-1;
    в поле Prompt мы ничего не указываем, так как не будем здесь использовать промпт. По умолчанию модуль будет производить точную транскрибацию текста, чтобы сохранить оригинальный текст, как именно шёл разговор;
    в поле Response Format мы выбираем вид результатов: мы хотим получить их в текстовом формате, поэтому выбираем text. Также, включив ползунок Show advanced settings, можно выставить температуру промпта — чем ниже температура, тем меньше нейросеть выдумывает что-то от себя. Так как здесь нам нужны только факты без фантазий искусственного интеллекта, выставляем температуру на 0. Нажимаем ОК.

10. Проверим работу подключённых модулей: нажимаем Run once. Модули отработали, и второй модуль выдал ошибку:

11. Нажимаем на уведомление над первым модулем и ищем причину ошибки. Видим, что в этом звонке нет вкладки Data — соответственно, нет вложенного файла, так как это письмо не содержало записи разговора, а всего лишь уведомляло о пропущенном звонке. Так что формально сценарий отработал правильно.

12. Снова укажем в настройках первого модуля дату начала работы: для этого, кликнув по модулю правой кнопкой мыши, выбираем в списке Choose where to start, выставляем необходимую дату и нажимаем ОК. Ещё раз запускаем модули кнопкой Run once. Теперь код отработал корректно и транскрибировал сообщение.

13. Добавляем следующий модуль (щёлкнув по предыдущему модулю и нажав +). В этом модуле мы будем получать данные из расшифрованного разговора.

Анализ расшифровок разговоров предоставляет множество возможностей:
    Из расшифровки можно определить, следует ли менеджер прописанному скрипту и предлагает ли дополнительные продукты;
    Можно оценить, вежлив ли менеджер, употребляет ли он слова-паразиты, не грубит ли и т.д.
    Анализ скрытых сомнений и возражений:
        Выявление сомнений и возражений клиентов, которые менеджер мог не заметить или не зафиксировать;
        Автоматическое сохранение сомнений и проведение их еженедельного анализа;
        Определение наиболее часто повторяющихся сомнений и передача этой информации в отдел маркетинга.
В этом сценарии мы как раз будем работать со сбором сомнений и возражений клиента.


1. Создав третий модуль, выбираем его тип: OpenAI ChatGPT. Из разделов этого инструмента выбираем Create a Completion, который создаёт ответ от ChatGPT.

2. Настроим параметры модуля:
    в настройках модуля в графе Connection можно ничего не указывать, так как соединение с аккаунтом OpenAI уже было настроено ранее;
    в графе Select Method выбираем Create a Chat Completion (GPT Models);
    в графе Model выбираем GPT-4 gpt-4o-mini;

Модель GPT-4o-mini уже хорошо себя зарекомендовала: даже при минимальной настройке промпта она эффективно выполняет поставленные задачи. Она также является экономически выгодной, хотя конечная стоимость зависит от объёма разговоров. Для анализа большого объёма данных можно использовать более дешёвые модели, например, GPT-3.5, однако в этом случае потребуется более тщательная настройка промптов. Выбор модели в конечном счёте зависит от типа бизнеса и конкретных задач.

    в графе Messages в поле Role настраиваем роль модели — выбираем System, чтобы задать модели определённую роль;
    в поле Message Content прописываем текстовый запрос: "Действуй как руководитель отдела продаж, твоя задача — эффективно управлять продажами, и чем больше продаж, тем лучше";
    щёлкаем по +Add message, на этот раз в поле Role выбираем User и в поле Message Content прописываем, что конкретно нужно делать: "На основании [Text] кратко опиши три основных сомнения клиента". При этом мы выбираем из открывшегося списка элемент Text, щёлкнув по нему.

    в графе Max Tokens указываем максимальное количество токенов: 1000 (этого вполне достаточно);
    включив ползунок Show advanced settings, выставляем значение температуры на 0.5. Остальные параметры здесь можно оставить как есть;
    в графе Response Format выбираем Text;


3. Нажимаем OK. Третий модуль создан и настроен.
Для лучшего понимания хода работы желательно сразу же переименовывать созданные модули: щёлкнув по модулю правой кнопкой мыши, в открывшемся списке выбираем Rename и задаём модулю соответствующее имя.

4. Дадим второму модулю название "Транскрибация вишпер", а третий модуль назовём "Сомнения клиента".

5. Щёлкаем по первому модулю правой кнопкой мыши — choose where to start — Select the first email, выбираем письмо и нажимаем ОК. Запускаем сценарий кнопкой Run once.

Так как у нас уже создано три модуля, то на это действие сейчас будет потрачено три операции. Таким образом, создав сценарий и зная примерное количество поступающих в день звонков, можно посчитать количество затрачиваемых операций. Из этого следует, что 1000 операций, предоставляемых на бесплатном тарифе Make, для решения ежедневных задач может не хватить.

6. Проверяем результаты по модулям, щёлкая по каждому модулю: в первом модуле письмо получено и обработано, во втором сделана транскрибация, в третьем — проведён анализ текста и выделены три сомнения. Таким образом, если то или иное сомнение будет встречаться в анализе часто, мы можем транслировать его руководителю отдела продаж для дальнейшей работы.

7. Добавим ещё один модуль OpenAI ChatGPT, вид My OpenAI connection, Select Method — Create a Chat Completion, Model — GPT-4 gpt-4o, Messages — Role — User. В графе Message Content пишем: "На основании [Text] предложи кратко три улучшения для компании, чтобы сделать больше продаж”. В графе Max Tokens снова указываем 1 000, в расширенных настройках выставляем значение температуры 0.5 и нажимаем OK.

8. Снова щёлкнув по первому модулю, выбираем Choose where to start — Select the first email — выбираем письмо, которое нужно проанализировать и нажимаем Run once.

9. Получаем результаты и щёлкаем по результатам модуля "Сомнения клиента". Как и в прошлый раз, нейросеть, проанализировав разговор, вывела три сомнения/возражения клиента:

Теперь взглянем на результат последнего созданного модуля.

Как видим, ИИ предложил решение и дал рекомендации по каждому сомнению клиента.

Таким образом, мы создали сложную структуру аналитики рабочих процессов.


1. Создаём следующий модуль, на этот раз выбираем тип модуля — Google Sheets. Среди различных вариантов этого модуля выбираем Add a Row (добавить новый ряд).

2. Настроим модуль:
    в графе Connection через кнопку Add добавляем соединение с Google-аккаунтом;
    в графе Choose a Method выбираем Select by path;
    в графе Choose a Drive оставляем My Drive;
    в графе Spreadsheet ID выбираем файл имеющейся Google-диске таблицы (предварительно необходимо этот файл создать);
    в графе Sheet Name выбираем конкретный лист в этой таблице;
    В графы Values последовательно добавляем, какая информация будет отображаться в соответствующих колонках, выбирая из открывающегося списка:
        Date;
        Text;
        Result (из модуля Транскрибация);
        Result (из модуля Сомнения);
        Total Tokens;
        Total Tokens.

Информация о количестве использованных токенов нам пригодится для подсчёта, сколько токенов было потрачено. Базовые настройки сделаны, нажимаем OK.

3. Снова щёлкнув по первому модулю правой кнопкой мыши, нажимаем Choose where to start, выбираем письмо для анализа и нажимаем OK. Сценарий запущен, ждём результатов.

4. Когда все модули отработали каждый свою часть задачи, заходим в Google-таблицу и видим, что транскрибация и весь последующий анализ отражены в соответствующих колонках. Здесь также имеется информация о том, сколько токенов было потрачено на этот анализ.

Теперь каждый обработанный разговор будет отправляться в Google-таблицу в удобном для чтения формате. При этом мы не подгружали помощнику никакой информации о компании и не проводили обучения, за полчаса собрав решение, позволяющее проводить такого рода анализ. Это особенно полезный инструмент для соло-предпринимателей, у которых нет команды и времени для проверки всех звонков. 